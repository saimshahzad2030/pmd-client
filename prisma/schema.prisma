// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id          Int           @id @default(autoincrement())
//   firstname   String
//   lastname    String
//   email       String        @unique
//   password    String
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   dateofbirth DateTime?
//   phone       Int?          @unique
//   token       String?       @db.Text
//   favourites  UserProduct[]
//   products    Products[]    @relation("myProducts")
// }

// model Otp {
//   id     Int @id @default(autoincrement())
//   userId Int
// }

// model Products {
//   id          Int           @id @default(autoincrement())
//   name        String
//   updatedAt   DateTime      @updatedAt
//   createdAt   DateTime      @default(now())
//   description String
//   seller      User          @relation("myProducts", fields: [sellerId], references: [id])
//   sellerId    Int
//   favourites  UserProduct[]
// }

// model UserProduct {
//   userId    Int
//   productId Int
//   createdAt DateTime @default(now())

//   user    User     @relation(fields: [userId], references: [id])
//   product Products @relation(fields: [productId], references: [id])

//   @@id([userId, productId])
// }















// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BASIC
  ADMIN
}

//it is like a dropdown contaning only two fields either admin or basic so user can be basic or admin

model User {
  //field level attribute

  // id    Int     @id @default(autoincrement()) 1,2,3,4,5
  id             String   @id @default(uuid())
  name           String   @unique
  age            Int
  createdAt      DateTime @updatedAt
  updatedAt      DateTime @default(now())
  role           Role     @default(BASIC)
  email          String? //? means optional
  writtenPosts   Post[]   @relation("writtenPosts")
  favouritePosts Post[]   @relation("favouritePosts")

  userPreference UserPreference?
  //@@id([name,email,age]) //means we will provide id that is combinatio on name, email and age instead of relying on automatically uuid generation or eevn incrementer

  //block level attribute  
  //unique([age, email]) //means 2 users can't have same age and name
  @@index([email]) //means we will provide index to emails so that we can latelyy work on indexes and it will be so handy
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Post {
  id            String  @id @default(uuid())
  name          String  @default("Post")
  // if i just right author and User and save it, it will automaticallly show other genrated relation code
  author        User    @relation("writtenPosts", fields: [userId], references: [id])
  userId        String
  favouriteBy   User?   @relation("favouritePosts", fields: [favouriteById], references: [id])
  favouriteById String?
}
